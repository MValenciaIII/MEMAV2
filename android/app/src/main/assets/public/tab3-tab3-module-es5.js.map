{"version":3,"sources":["webpack:///node_modules/@turf/bbox/dist/es/index.js","webpack:///node_modules/@turf/boolean-disjoint/dist/es/index.js","webpack:///node_modules/@turf/boolean-intersects/dist/es/index.js","webpack:///node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","webpack:///node_modules/@turf/helpers/dist/es/index.js","webpack:///node_modules/@turf/invariant/dist/es/index.js","webpack:///node_modules/@turf/line-intersect/dist/es/index.js","webpack:///node_modules/@turf/line-segment/dist/es/index.js","webpack:///node_modules/@turf/meta/dist/es/index.js","webpack:///node_modules/@turf/polygon-to-line/dist/es/index.js","webpack:///node_modules/geojson-rbush/index.js","webpack:///node_modules/quickselect/quickselect.js","webpack:///src/app/tab3/tab3.page.html","webpack:///node_modules/rbush/index.js","webpack:///src/app/tab3/tab3-routing.module.ts","webpack:///src/app/tab3/tab3.module.ts","webpack:///src/app/tab3/tab3.page.scss","webpack:///src/app/tab3/tab3.page.ts"],"names":["bbox","geojson","result","Infinity","coord","booleanDisjoint","feature1","feature2","bool","flatten1","flatten2","disjoint","geometry","geom1","geom2","type","compareCoords","coordinates","isPointOnLine","isLineOnLine","isLineInPoly","isPolyInPoly","lineString","pt","i","length","isPointOnLineSegment","lineString1","lineString2","doLinesIntersect","features","polygon","_i","_a","coord1","_b","_c","coord2","lineSegmentStart","lineSegmentEnd","dxc","dyc","dxl","dyl","cross","Math","abs","pair1","pair2","booleanIntersects","booleanPointInPolygon","point","options","Error","geom","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","k","ring","isInside","slice","j","xi","yi","xj","yj","onBoundary","intersect","earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","feature","properties","feat","id","_options","multiPoint","multiLineString","multiPolygon","Array","isArray","isNumber","points","featureCollection","map","coords","coordinates_1","polygons","lineStrings","fc","geometryCollection","geometries","round","num","precision","multiplier","pow","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isNaN","isObject","input","constructor","Object","validateBBox","forEach","validateId","indexOf","getCoord","getCoords","containsNumber","geojsonType","value","name","featureOf","collectionOf","getGeom","getType","_name","lineIntersect","line1","line2","unique","results","intersects","push","tree","load","segment","search","match","key","join","coords1","coords2","x1","y1","x2","y2","x3","y3","x4","y4","denom","numeA","numeB","uA","uB","x","y","lineSegment","lineSegmentFeature","segments","createSegments","reduce","previousCoords","currentCoords","west","south","east","north","coordEach","callback","excludeWrapCoord","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","undefined","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","coordinate","flattenReduce","segmentEach","segmentIndex","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","poly","polygonToLine","multiPolygonToLine","coordsToLine","multiPoly","lines","rbush","helpers","meta","turfBBox","geojsonRbush","maxEntries","insert","prototype","call","remove","equals","clear","toBBox","collides","all","toJSON","fromJSON","json","minX","minY","maxX","maxY","module","exports","global","factory","quickselect","arr","left","right","compare","quickselectStep","defaultCompare","n","m","z","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","swap","tmp","a","b","format","_maxEntries","_minEntries","ceil","_initFormat","_all","data","node","nodesToSearch","len","child","childBBox","children","leaf","contains","pop","_build","height","_splitRoot","tmpNode","_insert","item","createNode","equalsFn","path","indexes","parent","index","goingUp","findItem","splice","_condense","compareMinX","compareNodeMinX","compareMinY","compareNodeMinY","apply","items","N","M","calcBBox","N2","N1","right2","right3","multiSelect","_chooseSubtree","level","targetNode","enlargement","minArea","minEnlargement","bboxArea","enlargedArea","isNode","insertPath","extend","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","distBBox","intersectionArea","xMargin","_allDistMargin","yMargin","sort","leftBBox","rightBBox","margin","bboxMargin","siblings","compareArr","Function","p","destNode","stack","mid","routes","component","Tab3PageRoutingModule","imports","forChild","Tab3PageModule","declarations","Tab3Page","http","Functionone","getLocationService","initializeMapOptions","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","resp","lng","longitude","lat","latitude","latitudeOne","longitudeOne","then","setView","geoRadius","rangeId","getAlerts","mapOptions","layers","maxZoom","attribution","zoom","milesRadius","geoRadiusLine","radius","addTo","setRadius","console","geoJSONCircle","circleToPolygon","turfcircle","toGeoJSON","element","doesIntersect","marker","setIcon","iconSize","iconAnchor","iconUrl","response","get","subscribe","pressOne","bindPopup","areaDesc","event","lonlat","brng","dist","VincentyConstants","f","lon1","lat1","pi","alpha1","sinAlpha1","sin","cosAlpha1","cos","tanU1","tan","cosU1","sinU1","sigma1","atan2","sinAlpha","cosSqAlpha","uSq","A","B","sigma","sigmaP","cos2SigmaM","sinSigma","cosSigma","deltaSigma","lat2","lambda","C","lam","lamFunc","lat2a","origin","sides","rotation","newLonlat","geomPoint","destinationVincenty","circle","getLatLng","getRadius","createGeodesicPolygon","selector","template"],"mappings":"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","file":"tab3-tab3-module-es5.js","sourcesContent":["import { coordEach } from \"@turf/meta\";\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nbbox[\"default\"] = bbox;\nexport default bbox;\n","import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n","import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Boolean-intersects returns (TRUE) two geometries intersect.\n *\n * @name booleanIntersects\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanIntersects(line, point);\n * //=true\n */\nexport default function booleanIntersects(feature1, feature2) {\n    var bool = false;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === true) {\n                return true;\n            }\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { feature, featureCollection, point, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport lineSegment from \"@turf/line-segment\";\nimport { featureEach } from \"@turf/meta\";\nimport rbush from \"geojson-rbush\";\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @name lineIntersect\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect(line1, line2) {\n    var unique = {};\n    var results = [];\n    // First, normalize geometries to features\n    // Then, handle simple 2-vertex segments\n    if (line1.type === \"LineString\") {\n        line1 = feature(line1);\n    }\n    if (line2.type === \"LineString\") {\n        line2 = feature(line2);\n    }\n    if (line1.type === \"Feature\" &&\n        line2.type === \"Feature\" &&\n        line1.geometry !== null &&\n        line2.geometry !== null &&\n        line1.geometry.type === \"LineString\" &&\n        line2.geometry.type === \"LineString\" &&\n        line1.geometry.coordinates.length === 2 &&\n        line2.geometry.coordinates.length === 2) {\n        var intersect = intersects(line1, line2);\n        if (intersect) {\n            results.push(intersect);\n        }\n        return featureCollection(results);\n    }\n    // Handles complex GeoJSON Geometries\n    var tree = rbush();\n    tree.load(lineSegment(line2));\n    featureEach(lineSegment(line1), function (segment) {\n        featureEach(tree.search(segment), function (match) {\n            var intersect = intersects(segment, match);\n            if (intersect) {\n                // prevent duplicate points https://github.com/Turfjs/turf/issues/688\n                var key = getCoords(intersect).join(\",\");\n                if (!unique[key]) {\n                    unique[key] = true;\n                    results.push(intersect);\n                }\n            }\n        });\n    });\n    return featureCollection(results);\n}\n/**\n * Find a point that intersects LineStrings with two coordinates each\n *\n * @private\n * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)\n * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)\n * @returns {Feature<Point>} intersecting GeoJSON Point\n */\nfunction intersects(line1, line2) {\n    var coords1 = getCoords(line1);\n    var coords2 = getCoords(line2);\n    if (coords1.length !== 2) {\n        throw new Error(\"<intersects> line1 must only contain 2 coordinates\");\n    }\n    if (coords2.length !== 2) {\n        throw new Error(\"<intersects> line2 must only contain 2 coordinates\");\n    }\n    var x1 = coords1[0][0];\n    var y1 = coords1[0][1];\n    var x2 = coords1[1][0];\n    var y2 = coords1[1][1];\n    var x3 = coords2[0][0];\n    var y3 = coords2[0][1];\n    var x4 = coords2[1][0];\n    var y4 = coords2[1][1];\n    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0) {\n            return null;\n        }\n        return null;\n    }\n    var uA = numeA / denom;\n    var uB = numeB / denom;\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n        var x = x1 + uA * (x2 - x1);\n        var y = y1 + uA * (y2 - y1);\n        return point([x, y]);\n    }\n    return null;\n}\nexport default lineIntersect;\n","import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n","import { feature, lineString, isObject, point } from '@turf/helpers';\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  // Handles null Geometry -- Skips this GeoJSON\n  if (geojson === null) return;\n  var j,\n    k,\n    l,\n    geometry,\n    stopG,\n    coords,\n    geometryMaybeCollection,\n    wrapShrink = 0,\n    coordIndex = 0,\n    isGeometryCollection,\n    type = geojson.type,\n    isFeatureCollection = type === \"FeatureCollection\",\n    isFeature = type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[featureIndex].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[geomIndex]\n        : geometryMaybeCollection;\n\n      // Handles null Geometry -- Skips this geometry\n      if (geometry === null) continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n\n      wrapShrink =\n        excludeWrapCoord &&\n        (geomType === \"Polygon\" || geomType === \"MultiPolygon\")\n          ? 1\n          : 0;\n\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (\n            callback(\n              coords,\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (\n              callback(\n                coords[j],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false\n            )\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\") multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\") multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (\n                callback(\n                  coords[j][k],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false\n              )\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\") multiFeatureIndex++;\n            if (geomType === \"Polygon\") geometryIndex++;\n          }\n          if (geomType === \"Polygon\") multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (\n                  callback(\n                    coords[j][k][l],\n                    coordIndex,\n                    featureIndex,\n                    multiFeatureIndex,\n                    geometryIndex\n                  ) === false\n                )\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (\n              coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===\n              false\n            )\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function (\n      currentCoord,\n      coordIndex,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex\n    ) {\n      if (coordIndex === 0 && initialValue === undefined)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false) break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function (currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false) break;\n    }\n  }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function (currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === undefined)\n      previousValue = currentFeature;\n    else previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function (coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n  var i,\n    j,\n    g,\n    geometry,\n    stopG,\n    geometryMaybeCollection,\n    isGeometryCollection,\n    featureProperties,\n    featureBBox,\n    featureId,\n    featureIndex = 0,\n    isFeatureCollection = geojson.type === \"FeatureCollection\",\n    isFeature = geojson.type === \"Feature\",\n    stop = isFeatureCollection ? geojson.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection\n      ? geojson.features[i].geometry\n      : isFeature\n      ? geojson.geometry\n      : geojson;\n    featureProperties = isFeatureCollection\n      ? geojson.features[i].properties\n      : isFeature\n      ? geojson.properties\n      : {};\n    featureBBox = isFeatureCollection\n      ? geojson.features[i].bbox\n      : isFeature\n      ? geojson.bbox\n      : undefined;\n    featureId = isFeatureCollection\n      ? geojson.features[i].id\n      : isFeature\n      ? geojson.id\n      : undefined;\n    isGeometryCollection = geometryMaybeCollection\n      ? geometryMaybeCollection.type === \"GeometryCollection\"\n      : false;\n    stopG = isGeometryCollection\n      ? geometryMaybeCollection.geometries.length\n      : 1;\n\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection\n        ? geometryMaybeCollection.geometries[g]\n        : geometryMaybeCollection;\n\n      // Handle null Geometry\n      if (geometry === null) {\n        if (\n          callback(\n            null,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false\n        )\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (\n            callback(\n              geometry,\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false\n          )\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (\n              callback(\n                geometry.geometries[j],\n                featureIndex,\n                featureProperties,\n                featureBBox,\n                featureId\n              ) === false\n            )\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    // Only increase `featureIndex` per each feature\n    featureIndex++;\n  }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function (\n      currentGeometry,\n      featureIndex,\n      featureProperties,\n      featureBBox,\n      featureId\n    ) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n    // Callback for single geometry\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (\n          callback(\n            feature(geometry, properties, { bbox: bbox, id: id }),\n            featureIndex,\n            0\n          ) === false\n        )\n          return false;\n        return;\n    }\n\n    var geomType;\n\n    // Callback for multi-geometry\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n\n    for (\n      var multiFeatureIndex = 0;\n      multiFeatureIndex < geometry.coordinates.length;\n      multiFeatureIndex++\n    ) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate,\n      };\n      if (\n        callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===\n        false\n      )\n        return false;\n    }\n  });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function (currentFeature, featureIndex, multiFeatureIndex) {\n      if (\n        featureIndex === 0 &&\n        multiFeatureIndex === 0 &&\n        initialValue === undefined\n      )\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n\n    // Exclude null Geometries\n    if (!feature.geometry) return;\n    // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n    var type = feature.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\") return;\n\n    // Generate 2-vertex line segments\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (\n      coordEach(\n        feature,\n        function (\n          currentCoord,\n          coordIndex,\n          featureIndexCoord,\n          multiPartIndexCoord,\n          geometryIndex\n        ) {\n          // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n          if (\n            previousCoords === undefined ||\n            featureIndex > previousFeatureIndex ||\n            multiPartIndexCoord > previousMultiIndex ||\n            geometryIndex > prevGeomIndex\n          ) {\n            previousCoords = currentCoord;\n            previousFeatureIndex = featureIndex;\n            previousMultiIndex = multiPartIndexCoord;\n            prevGeomIndex = geometryIndex;\n            segmentIndex = 0;\n            return;\n          }\n          var currentSegment = lineString(\n            [previousCoords, currentCoord],\n            feature.properties\n          );\n          if (\n            callback(\n              currentSegment,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex,\n              segmentIndex\n            ) === false\n          )\n            return false;\n          segmentIndex++;\n          previousCoords = currentCoord;\n        }\n      ) === false\n    )\n      return false;\n  });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentIndex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function (\n      currentSegment,\n      featureIndex,\n      multiFeatureIndex,\n      geometryIndex,\n      segmentIndex\n    ) {\n      if (started === false && initialValue === undefined)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n  // validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n    if (feature.geometry === null) return;\n    var type = feature.geometry.type;\n    var coords = feature.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (\n          var geometryIndex = 0;\n          geometryIndex < coords.length;\n          geometryIndex++\n        ) {\n          if (\n            callback(\n              lineString(coords[geometryIndex], feature.properties),\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false\n          )\n            return false;\n        }\n        break;\n    }\n  });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === undefined)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find SegmentIndex\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex =\n          coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n  // Optional Parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n\n  // Find FeatureIndex\n  var properties = options.properties;\n  var geometry;\n\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n\n  // Find Coord Index\n  if (geometry === null) return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex =\n          coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\n\nexport { coordAll, coordEach, coordReduce, featureEach, featureReduce, findPoint, findSegment, flattenEach, flattenReduce, geomEach, geomReduce, lineEach, lineReduce, propEach, propReduce, segmentEach, segmentReduce };\n","import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\n *\n * @name polygonToLine\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\n * @example\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\n *\n * var line = turf.polygonToLine(poly);\n *\n * //addToMap\n * var addToMap = [line];\n */\nexport default function (poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    if (!options.properties && poly.type === \"Feature\") {\n        options.properties = poly.properties;\n    }\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonToLine(geom, options);\n        case \"MultiPolygon\":\n            return multiPolygonToLine(geom, options);\n        default:\n            throw new Error(\"invalid poly\");\n    }\n}\n/**\n * @private\n */\nexport function polygonToLine(poly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(poly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : poly.type === \"Feature\"\n            ? poly.properties\n            : {};\n    return coordsToLine(coords, properties);\n}\n/**\n * @private\n */\nexport function multiPolygonToLine(multiPoly, options) {\n    if (options === void 0) { options = {}; }\n    var geom = getGeom(multiPoly);\n    var coords = geom.coordinates;\n    var properties = options.properties\n        ? options.properties\n        : multiPoly.type === \"Feature\"\n            ? multiPoly.properties\n            : {};\n    var lines = [];\n    coords.forEach(function (coord) {\n        lines.push(coordsToLine(coord, properties));\n    });\n    return featureCollection(lines);\n}\n/**\n * @private\n */\nexport function coordsToLine(coords, properties) {\n    if (coords.length > 1) {\n        return multiLineString(coords, properties);\n    }\n    return lineString(coords[0], properties);\n}\n","var rbush = require('rbush');\nvar helpers = require('@turf/helpers');\nvar meta = require('@turf/meta');\nvar turfBBox = require('@turf/bbox').default;\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @name rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n    var tree = rbush(maxEntries);\n    /**\n     * [insert](https://github.com/mourner/rbush#data-format)\n     *\n     * @param {Feature} feature insert single GeoJSON Feature\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     * tree.insert(poly)\n     */\n    tree.insert = function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.insert.call(this, feature);\n    };\n\n    /**\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n     *\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var polys = turf.polygons([\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n     * ]);\n     * tree.load(polys);\n     */\n    tree.load = function (features) {\n        var load = [];\n        // Load an Array of Features\n        if (Array.isArray(features)) {\n            features.forEach(function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        } else {\n            // Load a FeatureCollection\n            featureEach(features, function (feature) {\n                if (feature.type !== 'Feature') throw new Error('invalid features');\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n                load.push(feature);\n            });\n        }\n        return rbush.prototype.load.call(this, load);\n    };\n\n    /**\n     * [remove](https://github.com/mourner/rbush#removing-data)\n     *\n     * @param {Feature} feature remove single GeoJSON Feature\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.remove(poly);\n     */\n    tree.remove = function (feature, equals) {\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        return rbush.prototype.remove.call(this, feature, equals);\n    };\n\n    /**\n     * [clear](https://github.com/mourner/rbush#removing-data)\n     *\n     * @returns {RBush} GeoJSON Rbush\n     * @example\n     * tree.clear()\n     */\n    tree.clear = function () {\n        return rbush.prototype.clear.call(this);\n    };\n\n    /**\n     * [search](https://github.com/mourner/rbush#search)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.search(poly);\n     */\n    tree.search = function (geojson) {\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n        return featureCollection(features);\n    };\n\n    /**\n     * [collides](https://github.com/mourner/rbush#collisions)\n     *\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n     * @example\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n     *\n     * tree.collides(poly);\n     */\n    tree.collides = function (geojson) {\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\n    };\n\n    /**\n     * [all](https://github.com/mourner/rbush#search)\n     *\n     * @returns {FeatureCollection} all the features in RBush\n     * @example\n     * tree.all()\n     */\n    tree.all = function () {\n        var features = rbush.prototype.all.call(this);\n        return featureCollection(features);\n    };\n\n    /**\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @returns {any} export data as JSON object\n     * @example\n     * var exported = tree.toJSON()\n     */\n    tree.toJSON = function () {\n        return rbush.prototype.toJSON.call(this);\n    };\n\n    /**\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n     *\n     * @param {any} json import previously exported data\n     * @returns {RBush} GeoJSON RBush\n     * @example\n     * var exported = {\n     *   \"children\": [\n     *     {\n     *       \"type\": \"Feature\",\n     *       \"geometry\": {\n     *         \"type\": \"Point\",\n     *         \"coordinates\": [110, 50]\n     *       },\n     *       \"properties\": {},\n     *       \"bbox\": [110, 50, 110, 50]\n     *     }\n     *   ],\n     *   \"height\": 1,\n     *   \"leaf\": true,\n     *   \"minX\": 110,\n     *   \"minY\": 50,\n     *   \"maxX\": 110,\n     *   \"maxY\": 50\n     * }\n     * tree.fromJSON(exported)\n     */\n    tree.fromJSON = function (json) {\n        return rbush.prototype.fromJSON.call(this, json);\n    };\n\n    /**\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n     *\n     * @private\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\n     */\n    tree.toBBox = function (geojson) {\n        var bbox;\n        if (geojson.bbox) bbox = geojson.bbox;\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\n        else throw new Error('invalid geojson')\n\n        return {\n            minX: bbox[0],\n            minY: bbox[1],\n            maxX: bbox[2],\n            maxY: bbox[3]\n        };\n    };\n    return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.quickselect = factory());\n}(this, (function () { 'use strict';\n\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n}\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nreturn quickselect;\n\n})));\n","export default \"<ion-header [translucent]=\\\"true\\\">\\n    <ion-toolbar color=\\\"primary\\\">\\n        <ion-title> MSEMA </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [fullscreen]=\\\"true\\\">\\n    <ion-card-header> <img src=\\\"assets/tab3/map.png\\\" height=\\\"30\\\"> WEATHER ALERTS</ion-card-header>\\n    <!-- <div id=\\\"mapId3\\\" style=\\\"width: 100%; height: 70%\\\"></div> -->\\n    <div \\n    id=\\\"map\\\"\\n  leaflet\\n  style=\\\"width: 100%; height: 70%\\\"\\n  \\n  [leafletOptions]=\\\"mapOptions\\\"\\n  (leafletMapReady)=\\\"onMapReady($event)\\\"\\n></div>\\n<!-- <div class=\\\"App\\\">\\n</div> -->\\n\\n<input #ranger (input)=\\\"geoRadius(ranger.value)\\\" type=\\\"range\\\" min=0 max=400000 value=200\\n />\\n\\n\\n</ion-content>\";","'use strict';\n\nmodule.exports = rbush;\nmodule.exports.default = rbush;\n\nvar quickselect = require('quickselect');\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Tab3Page } from './tab3.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: Tab3Page,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class Tab3PageRoutingModule {}\n","import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Tab3Page } from './tab3.page';\nimport { ExploreContainerComponentModule } from '../explore-container/explore-container.module';\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { LeafletModule } from \"@asymmetrik/ngx-leaflet\";\nimport { Tab3PageRoutingModule } from './tab3-routing.module';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    LeafletModule,\n    ExploreContainerComponentModule,\n    RouterModule.forChild([{ path: '', component: Tab3Page }]),\n    Tab3PageRoutingModule,\n  ],\n  declarations: [Tab3Page]\n})\nexport class Tab3PageModule {}\n","export default \".App {\\n  height: 480px;\\n  padding: 10rem;\\n}\\n\\n.leaflet-container {\\n  height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGFiMy90YWIzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxjQUFBO0FBQ0o7O0FBQ0U7RUFDRSxZQUFBO0FBRUoiLCJmaWxlIjoic3JjL2FwcC90YWIzL3RhYjMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLkFwcCB7XG4gICAgaGVpZ2h0OiA0ODBweDtcbiAgICBwYWRkaW5nOiAxMHJlbTtcbiAgfVxuICAubGVhZmxldC1jb250YWluZXIge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfSJdfQ== */\";","import { Component, OnInit, OnDestroy, NgZone, SimpleChange, SimpleChanges, Input, ViewChild, AfterViewInit } from '@angular/core';\n// import * as Leaflet from 'leaflet';\nimport { HttpClient } from \"@angular/common/http\";\nimport * as L from \"leaflet\";\nimport {latLng, MapOptions, tileLayer, Map, Marker, icon, Circle} from 'leaflet';\nimport * as turfcircle from '@turf/circle';\nimport booleanIntersects from '@turf/boolean-intersects';\n\n\n@Component({\n  selector: 'app-tab3',\n  templateUrl: 'tab3.page.html',\n  styleUrls: ['tab3.page.scss']\n})\n//I NEED TO GET RADIUS TO SHOW\n//NEED TO Get current location to set view in leaflet in angular\n//I have current location how do i send it as a variable outside ngOnInit or alternative\n//update noaa warnings if bad weather near by.\n//also fix puzzle pieced map on load\nexport class Tab3Page implements AfterViewInit {\n  rangeId: any;\n  map: Map;\n  mapOptions: MapOptions;\n  latitudeOne: any;\n  longitudeOne: any;\n  geoRadiusLine: any;\n  geoJSONCircle: any;\n  polygons: any;\n  turfcircle: any;\n  @ViewChild('ranger') tab3Page: Tab3Page;\n \n  constructor(private http: HttpClient ) {\n    var Functionone;\n    \n\n    \n  }\n\n\n\n//  map = L.map('map').setView(L.latLng(32.302898, -90.183487), 11);\n//  group = L.layerGroup().addTo(this.map);\n\n\n\n  ngOnInit(){\n\n    this.getLocationService() \n    this.initializeMapOptions()\n\n  }   \n    \n  ngAfterViewInit() {\n\n\n\n  }\n\n\n    getLocationService():Promise<any>{\n      return new Promise((resolve, reject)=>{\n        navigator.geolocation.getCurrentPosition(resp=>{\n          resolve({lng: resp.coords.longitude, lat: resp.coords.latitude})\n          this.latitudeOne = resp.coords.latitude\n          this.longitudeOne = resp.coords.longitude\n        })\n  \n      })\n    }\n  //MAYBE START STORING VALUES OF RESP.LAT/LNG AND USE FOR CHECKING LAYER THEN REMOVEING IN ONMAPREADY\n  \n    \n    onMapReady(map: Map) {\n      this.map = map;\n      this.getLocationService().then(resp=> {\n        this.map.setView(L.latLng(resp.lat, resp.lng), 18)\n      })\n      this.geoRadius(this.rangeId)\n      this.getAlerts();\n    }\n\n\n//MISSISSIPPI AREA\n    private initializeMapOptions() {\n\n      this.mapOptions = {\n        layers: [\n          tileLayer(\n            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            {\n              maxZoom: 18,\n              attribution: 'Map data © OpenStreetMap contributors'\n            })\n        ],\n        zoom: 18,\n        //center: latLng(this.longitude, this.latitude),\n        \n      };\n\n    }\n\n//UPDATING A MAP RADIUS USING BUTTONS IN ANGULAR\n//ANGULAR BUTTON \n\n\n    geoRadius(value) {\n      //BUTTON RADIUS: REMOVE PREVIOUS LAYER WHEN NEW BUTTON IS PRESSED\n      //SLIDER RADIUS: LEARN HOW TO UPDATE A RADIUS IMMEDIATELY WHEN RADIUS SLIDER IS MOVED\n      //ALSO HOW TO SAVE RADIUS VALUE.\n      this.getLocationService().then(resp=>{\n      \n        this.rangeId = value\n        let milesRadius = this.rangeId / 1609;\n        \n        \n        if(this.rangeId === undefined) {\n\n        this.geoRadiusLine = L.circle([resp.lat, resp.lng], { radius: 200 }).addTo(this.map);\n\n        \n        } \n          else if (this.rangeId > 0) {\n            \n            this.geoRadiusLine.setRadius(this.rangeId)\n\n\n            //toGeoJSON is converting to a point instead of a POLYGON\n            //Leaflet doesn't support converting Polygons\n            //Need to find a plugin or replace the circle.\n            console.log(this.geoRadiusLine)\n            this.geoJSONCircle = this.circleToPolygon(this.geoRadiusLine)\n            this.turfcircle = this.geoJSONCircle.toGeoJSON()\n            console.log(this.turfcircle)\n            // TEST TO EXTRACT POLYGON AND STORE \n            // https://medium.com/geoman-blog/how-to-handle-circles-in-geojson-d04dcd6cb2e6\n            //\n\n           \n            //\n            for (let i = 0; i < this.polygons.length; i++) {\n              const element = this.polygons[i];\n              let  doesIntersect = booleanIntersects(\n                this.polygons[i].geometry,\n                this.turfcircle.geometry\n              )\n              console.log(this.polygons[i], this.turfcircle)\n              console.log(doesIntersect)\n              if(doesIntersect == true) {\n                console.log(element + `of ID = ${i} has an intersection!`)\n              }\n            }\n          }\n      })\n    }\n\n\n\n\n\n\n    private addSampleMarker() {\n      this.getLocationService().then(resp=> {\n        const marker = new Marker([resp.lat, resp.lng])\n        .setIcon( \n          icon({\n            iconSize: [25, 41],\n            iconAnchor: [13, 41],\n            iconUrl: 'assets/marker-icon.png'\n          }));\n      marker.addTo(this.map);\n      })\n      \n    }\n    \n    json;\n\n\n//WEATHER POLOYON \n    private async getAlerts() {\n      let poly = [];\n      let turfCircle;\n        let response = this.http.get(\"https://api.weather.gov/alerts/active?area=LA\").subscribe((json: any) => {\n          console.log(json);\n          this.json = json;\n          for (let i = 0; i < this.json.features.length; i++) {\n            const element = this.json.features[i];\n            console.log(element)\n            \n            poly.push(element) ;\n            this.polygons = poly\n            console.log(this.polygons)\n            //I NEED TO PARSE THE POLYGONS IN THE RESPONSE INTO POSITIOSN, PATHOPTIONS, KEY\n            //\n            \n            var pressOne = L.geoJSON(element).addTo(this.map);\n            pressOne.bindPopup(`<p>County Affected: ${element.properties.areaDesc}</p>\n            <p>Event: ${element.properties.event}</p>\n            `)\n          }\n          \n        });\n      }\n\n//FUNCTIONS FOR CONVERTING L.CIRCLE\n\n      public destinationVincenty(lonlat, brng, dist) { // rewritten to work with leaflet\n        const VincentyConstants = {\n          a: 6378137,\n          b: 6356752.3142,\n          f: 1 / 298.257223563\n        };\n      \n        const {a, b, f} = VincentyConstants;\n        const lon1 = lonlat.lng;\n        const lat1 = lonlat.lat;\n        const s = dist;\n        const pi = Math.PI;\n        const alpha1 = brng * pi / 180; // converts brng degrees to radius\n        const sinAlpha1 = Math.sin(alpha1);\n        const cosAlpha1 = Math.cos(alpha1);\n        const tanU1 = (1 - f) * Math.tan(lat1 * pi / 180 /* converts lat1 degrees to radius */);\n        const cosU1 = 1 / Math.sqrt((1 + tanU1 * tanU1));\n        const sinU1 = tanU1 * cosU1;\n        const sigma1 = Math.atan2(tanU1, cosAlpha1);\n        const sinAlpha = cosU1 * sinAlpha1;\n        const cosSqAlpha = 1 - sinAlpha * sinAlpha;\n        const uSq = cosSqAlpha * (a * a - b * b) / (b * b);\n        const A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n        const B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n        let sigma = s / (b * A);\n        let sigmaP = 2 * Math.PI;\n      \n        let cos2SigmaM;\n        let sinSigma;\n        let cosSigma;\n        while (Math.abs(sigma - sigmaP) > 1e-12) {\n          cos2SigmaM = Math.cos(2 * sigma1 + sigma);\n          sinSigma = Math.sin(sigma);\n          cosSigma = Math.cos(sigma);\n          const deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) -\n            B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n          sigmaP = sigma;\n          sigma = s / (b * A) + deltaSigma;\n        }\n        const tmp = sinU1 * sinSigma - cosU1 * cosSigma * cosAlpha1;\n        const lat2 = Math.atan2(sinU1 * cosSigma + cosU1 * sinSigma * cosAlpha1,\n          (1 - f) * Math.sqrt(sinAlpha * sinAlpha + tmp * tmp));\n        const lambda = Math.atan2(sinSigma * sinAlpha1, cosU1 * cosSigma - sinU1 * sinSigma * cosAlpha1);\n        const C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\n        const lam = lambda - (1 - C) * f * sinAlpha *\n          (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n        // const revAz = Math.atan2(sinAlpha, -tmp);  // final bearing\n        const lamFunc = lon1 + (lam * 180 / pi); // converts lam radius to degrees\n        const lat2a = lat2 * 180 / pi; // converts lat2a radius to degrees\n      \n        return L.latLng(lamFunc, lat2a);\n      }\n      \npublic createGeodesicPolygon(origin, radius, sides, rotation) {\n        let angle;\n        let newLonlat;\n        let geomPoint;\n        const points = [];\n      \n        for (let i = 0; i < sides; i += 1) {\n          angle = (i * 360 / sides) + rotation;\n          newLonlat = this.destinationVincenty(origin, angle, radius);\n          geomPoint = L.latLng(newLonlat.lng, newLonlat.lat);\n          points.push(geomPoint);\n        }\n      \n        return points;\n      }\n\npublic circleToPolygon(circle, sides = 60) {\n        const origin = circle.getLatLng();\n        const radius = circle.getRadius();\n        const polys = this.createGeodesicPolygon(origin, radius, sides, 0); // these are the points that make up the circle\n        const polygon = [];\n        for (let i = 0; i < polys.length; i += 1) {\n          const geometry = [polys[i].lat, polys[i].lng];\n          polygon.push(geometry);\n        }\n        return L.polygon(polygon, circle.options);\n}\n      \n  }\n\n\n\n\n\n"]}